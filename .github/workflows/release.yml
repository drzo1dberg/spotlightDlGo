name: release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag/Version (z.B. v1.1.1)'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: darwin
            goarch: amd64   # ggf. entfernen, wenn du Intel-mac willst
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          # cache ist ok ohne go.sum, Warnung kann ignoriert werden
      - name: Build
        run: |
          mkdir -p dist
          EXT=""
          [ "${{ matrix.goos }}" = "windows" ] && EXT=".exe"
          OUT="dist/spotlight-api-fetcher_${{ matrix.goos }}_${{ matrix.goarch }}${EXT}"
          echo "Building $OUT"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=0 \
            go build -o "$OUT" ./...
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Resolve tag
        id: vars
        run: |
          if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
            echo "tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          elif [ -n "${{ github.event.inputs.tag }}" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=v0.0.0-dev-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          draft: false 
          generate_release_notes: true
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
